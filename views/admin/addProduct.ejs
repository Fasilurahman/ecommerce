<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
<style>
    #image-preview-container {
      margin: 20px 0;
      max-width: 100%; /* Limit the width of the container */
      display: flex; /* Use flex to display images side by side */
      flex-wrap: wrap; /* Wrap images if there's overflow */
  }
  .image-crop-container {
      position: relative; /* Position relative for cropper control */
      margin: 10px; /* Space between images */
  }
  .cropper-view {
      border: 1px solid #ccc;
      max-width: 100%; /* Ensure the cropper fits the container */
  }
  #image-to-crop {
      display: none; /* Hide the image initially */
      max-width: 100%; /* Ensure the image fits within the container */
  }
</style>
</head>
<body>
  <div class="container">
    <h2>Add Product</h2>
    <form id="add-product-form" action="/admin/addProduct" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="name">Product Name</label>
        <input type="text" name="name" id="name" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="category">Category</label>
        <select name="category" id="category" class="form-control" required>
          <% categories.forEach(category => { %>
            <option value="<%= category._id %>"><%= category.name %></option>
          <% }) %>
        </select>
      </div>
      <div class="form-group">
        <label for="description">Description</label>
        <textarea name="description" id="description" class="form-control" rows="4" required></textarea>
      </div>
      <div class="form-group">
        <label for="brand">Brand</label>
        <select name="brand" id="brand" class="form-control" required>
          <% brands.forEach(brand => { %>
            <option value="<%= brand._id %>"><%= brand.brandName %></option>
          <% }) %>
        </select>
      </div>

      <!-- Variants Section -->
      <div id="variants-section">
        <h4>Variants</h4>
        <div class="variant-group">
          <div class="form-group">
            <label for="variantQuantity">Quantity</label>
            <input type="text" name="variants[0][quantity]" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="variantPrice">Price</label>
            <input type="number" name="variants[0][price]" class="form-control" step="0.01" min="0" required>
          </div>
          <div class="form-group">
            <label for="variantStock">Stock</label>
            <input type="number" name="variants[0][stock]" class="form-control" min="0" required>
          </div>
        </div>
        <button type="button" id="add-variant-btn" class="btn btn-secondary">Add Another Variant</button>
      </div>


    
      <h1>Image Cropper Example</h1>
      <input type="file" id="images" multiple required accept="image/*">
      <div id="image-preview-container"></div>
      <div id="cropper-container"></div> <!-- Keep cropper container for active cropping -->
    
    <button type="submit" class="btn btn-success">Add Product</button>
    
    </form>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>


  

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  const imagesInput = document.getElementById('images');
const imagePreviewContainer = document.getElementById('image-preview-container');
const cropperInstances = []; // Ensure this is defined globally

imagesInput.addEventListener('change', (event) => {
    imagePreviewContainer.innerHTML = ''; // Clear previous previews
    cropperInstances.length = 0; // Reset cropper instances

    Array.from(event.target.files).forEach((file, index) => {
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        img.classList.add('cropper-view');
        imagePreviewContainer.appendChild(img);

        const cropper = new Cropper(img, {
            aspectRatio: 1,
            viewMode: 1,
            // other Cropper options
        });
        cropperInstances.push(cropper); // Store the cropper instance
    });
});

// Image selection and cropping setup
imagesInput.addEventListener('change', (event) => {
    imagePreviewContainer.innerHTML = ''; // Clear previous previews
    cropperInstances.length = 0; // Reset cropper instances

    Array.from(event.target.files).forEach((file, index) => {
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        img.classList.add('cropper-view');
        imagePreviewContainer.appendChild(img);

        // Initialize Cropper.js
        const cropper = new Cropper(img, {
            aspectRatio: 1, // Adjust as needed
            viewMode: 1,
            // Additional options as needed
        });
        cropperInstances.push(cropper); // Store the cropper instance
    });
});


  document.getElementById('add-product-form').addEventListener('submit', function(e) {
  e.preventDefault();

  // ... [Validation code remains unchanged] ...
  // Form values
  const productName = document.getElementById('name').value.trim();
    const category = document.getElementById('category').value;
    const description = document.getElementById('description').value.trim();
    const brand = document.getElementById('brand').value;

    const variants = document.querySelectorAll('.variant-group');
    const images = imagesInput.files;

    let isValid = true;
    let errorMessage = '';

    // Product name validation
    if (productName.length < 3 || productName.length > 100) {
      isValid = false;
      errorMessage = 'Product name must be between 3 and 100 characters.';
    }

    // Category validation
    if (!category) {
      isValid = false;
      errorMessage = 'Please select a valid category.';
    }

    // Brand validation
    if (!brand) {
      isValid = false;
      errorMessage = 'Please select a valid brand.';
    }

    // Variants validation
    variants.forEach(variant => {
      const quantity = variant.querySelector('input[name*="quantity"]').value;
      const price = variant.querySelector('input[name*="price"]').value;
      const stock = variant.querySelector('input[name*="stock"]').value;

      if (!price || isNaN(price) || price <= 0) {
        isValid = false;
        errorMessage = 'Each variant must have a valid positive price.';
      }

      if (!stock || isNaN(stock) || stock < 0) {
        isValid = false;
        errorMessage = 'Each variant must have a valid stock number.';
      }
    });

    // Images validation
    if (images.length < 1 || images.length > 4) {
      isValid = false;
      errorMessage = 'Please select between 1 and 4 product images.';
    }

    // Validate each image file
    Array.from(images).forEach(image => {
      if (!['image/jpeg', 'image/png'].includes(image.type)) {
        isValid = false;
        errorMessage = 'Only JPEG and PNG image formats are allowed.';
      }
      if (image.size > 2 * 1024 * 1024) { // 2MB limit
        isValid = false;
        errorMessage = 'Each image size must not exceed 2MB.';
      }
    });

    // Final validation check
    if (!isValid) {
      Swal.fire({
        icon: 'error',
        title: 'Validation Error',
        text: errorMessage,
        confirmButtonText: 'OK'
      });
      return; // Prevent form submission if validation fails
    }

  const formData = new FormData(this);
  const images = document.getElementById('images').files;

  // Ensure we have cropper instances and process them
  if (cropperInstances.length === 0) {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'No images to crop.',
      confirmButtonText: 'OK'
    });
    return; // Stop submission if no cropper instances exist
  }

  // Append cropped images to formData
  Promise.all(cropperInstances.map((cropper, index) => {
    return new Promise((resolve) => {
      const canvas = cropper.getCroppedCanvas();
      canvas.toBlob((blob) => {
        if (blob) {
          formData.append('croppedImages[]', blob, `cropped-${index}.jpg`); // Use array notation for multiple files
        }
        resolve();
      });
    });
  })).then(() => {
    // Now all cropped images are appended, proceed with form submission
    fetch(this.action, {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message,
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = '/admin/products';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: data.message,
          confirmButtonText: 'OK'
        });
      }
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: 'An unexpected error occurred. Please try again later.',
        confirmButtonText: 'OK'
      });
    });
  });
});

</script>

</body>
</html>
